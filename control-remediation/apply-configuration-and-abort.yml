---
- hosts: all
  gather_facts: true
  become_method: sudo
  become_user: root
  vars_files:
  - vars/ec2-vars

  tasks:

    - name: Ensure users are present
      user:
        name: "{{ item.name }}"
        groups: wheel
        state: present
        uid: "{{ item.uid }}"
      with_items:
        - { name: "apone", uid: 1200 }
        - { name: "gorman", uid: 1201 }
        - { name: "hicks", uid: 1202 }

    - name: Install needed software
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - chrony
        - sudo
        - rsyslog

    - name: Ensure standard chrony config
      copy:
        src: files/chrony.conf
        dest: /etc/chrony.conf
        mode: 0644
        owner: root
        group: root

    - name: Ensure standard sudo config
      copy:
        src: files/sudoers
        dest: /etc/sudoers
        mode: 0640
        owner: root
        group: root

    - block:
      - name: Ensure log forwarding is configured
        copy:
          src: files/syslog
          dest: /etc/rsyslog.d/forward.conf
          mode: 0644
          owner: root
          group: root
        register: rsyslog_state

      - name: Ensure SELinux is enabled
        selinux:
          policy: targeted
          state: enforcing
        register: selinux_state

      - name: Ensure SELinux booleans are set properly
        seboolean:
          name: "{{ item }}"
          persistent: true
          state: false
        with_items:
          - httpd_execmem
          - selinuxuser_execstack
          - selinuxuser_execheap
        register: sebool_state
      
      - name: Ensure proper services are running
        service:
          name: "{{ item }}"
          state: running
          enabled: yes
        with_items:
          - rsyslog
          - chronyd

      - name: Abort if we made changes
        fail:
          msg: "Required configuration was not set"
        when: rsyslog_state|changed or selinux_state|changed or sebool_state|changed

      rescue:
        - name: Get EC2 instance information
          ec2_facts:

        - name: Terminate instance
          connection: local
          become: false
          ec2:
            region: "us-east-1"
            instance_ids: "{{ hostvars[inventory_hostname]['ansible_ec2_instance_id'] }}"
            state: absent
            wait: true

        - name: Relaunch instance
          connection: local
          become: false
          ec2:
            access_key: "{{ ec2_access_key }}"
            secret_key: "{{ ec2_secret_key }}"
            keypair: "{{ ec2_keypair }}"
            group: "{{ ec2_security_group }}"
            type: "{{ ec2_instance_type }}"
            image: "{{ ec2_image }}"
            region: "{{ ec2_region }}"
            instance_tags: "{'type':'{{ ec2_instance_type }}', 'group':'{{ ec2_security_group }}', 'Name':'demo_''{{ demo_tag_name }}'}"
            count: "{{ ec2_instance_count }}"
            wait: true
            user_data: |
                       #!/bin/bash
                       TOWER=webinar.demo.testing.ansible.com
                       JOB=16
                       KEY=ad7196b0a6d925711c10c42b5f938a2b
                       
                       retry_attempts=10
                       attempt=0
                       while [[ $attempt -lt $retry_attempts ]]
                       do
                           status_code=`curl -s -k -i --data "host_config_key=${KEY}" https://${TOWER}/api/v1/job_templates/${JOB}/callback/ | head -n 1 | awk '{print $2}'`
                           if [[ $status_code == 202 ]]
                               then
                               exit 0
                           fi
                           attempt=$(( attempt + 1 ))
                           echo "${status_code} received... retrying in 1 minute. (Attempt ${attempt})"
                           sleep 60
                       done
                       exit 1
          register: ec2

        - name: Wait for SSH to come up
          become: false
          connection: local
          wait_for:
            host: "{{ item.public_dns_name }}"
            port: 22
            delay: 60
            timeout: 320
            state: started
          with_items:
            - "{{ ec2.instances }}"

        - name: New instance
          debug:
            msg: "Instance relaunched due to configuration drift; new instance is {{ item.public_dns_name }}."
          with_items:
            - "{{ ec2.instances }}"
 